This program is part of an educational assignment in cybersecurity at NYU.
This code is an early version of the Secure Turing-Complete Sandbox Challenge
written by Prof Justin Cappos.
https://seattle.poly.edu/wiki/EducationalAssignments/SecureTuringCompleteSandboxChallengeBuild

This README details how to build the system and write code for it.   The
content is also duplicated inside of the main program (hardtohack.py)

You do not need to build the sandbox.   So typing `make' is a noop.

To use this, you must create a file 'program.in' and place the file contents
there.   Then to run the program, type: python hardtohack.py

   Author: Justin Cappos
 
   Start Date: June 8, 2012

   Purpose: Build a language sandbox that is Turing complete and unhackable

   The goal is to make the instruction set semi-usable (not just a Turing 
   Machine), but as small as possible.


   I'll handle execution like this.   The 'code segment' is 1M of 
   the program.   The 'data segment' has offsets in 1M.   The 'code 
   segment' is unwritable / readable by the program.   

   Each instruction has two parts: the opcode and the argument.   The opcode
   is the first byte and the argument is the next 3 bytes.   I'll write 
   the values as OPCODE ARGUMENT.  For shorthand, (1*4) means 1111, (X*20) 
   means any 20 binary digits, etc.

   The instruction set is the following 6 instructions:

                 
                        SETI
   00000000 (0*16)(X*8)  -> Load the immediate (X) into the register.
                        SUBI
   00000010 (0*16)(X*8)  -> Subtract the immediate (X) from the register.   
                            Underflow results in 00000000.
                        ADDI 
   00000011 (0*16)(X*8)  -> Add the immediate (X) to the register.   Overflow 
                            results in 11111111.
                        STORE
   00001000 (0*4)(X*20)  -> Store the register into position X*20.
                        LOAD
   00001100 (0*4)(X*20)  -> Load position X*20 in memory into the register.
                        BNONZERO
   00010001 (0*4)(X*20)  -> If the register is not 00000000, then jump to 
                            instruction number X*20.   The instruction 
                            X*20 will be executed next (not the one following).



   Any other instruction will be result in the program being rejected at load 
   time.

   If execution reaches the end of the instruction segment, the program 
   terminates.   So: SETI 1; BNONZERO 1*20; will halt the program unless
   the final instruction is a BNONZERO.

   In memory, a program is always exactly 257M of memory.   To read in a
   binary, a file is read in.   If it is shorter than 257M, all remaining
   bytes are empty.


